#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab4_p2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="pbd")]
	public partial class DataClasses2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertcomments(comments instance);
    partial void Updatecomments(comments instance);
    partial void Deletecomments(comments instance);
    partial void Insertposts(posts instance);
    partial void Updateposts(posts instance);
    partial void Deleteposts(posts instance);
    partial void Insertusers(users instance);
    partial void Updateusers(users instance);
    partial void Deleteusers(users instance);
    #endregion
		
		public DataClasses2DataContext() : 
				base(global::Lab4_p2.Properties.Settings.Default.pbdConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<comments> comments
		{
			get
			{
				return this.GetTable<comments>();
			}
		}
		
		public System.Data.Linq.Table<posts> posts
		{
			get
			{
				return this.GetTable<posts>();
			}
		}
		
		public System.Data.Linq.Table<users> users
		{
			get
			{
				return this.GetTable<users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.comments")]
	public partial class comments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _parent_id;
		
		private int _user_id;
		
		private int _post_id;
		
		private string _payload;
		
		private EntitySet<comments> _comments2;
		
		private EntityRef<comments> _comments1;
		
		private EntityRef<posts> _posts;
		
		private EntityRef<users> _users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onparent_idChanging(System.Nullable<int> value);
    partial void Onparent_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onpost_idChanging(int value);
    partial void Onpost_idChanged();
    partial void OnpayloadChanging(string value);
    partial void OnpayloadChanged();
    #endregion
		
		public comments()
		{
			this._comments2 = new EntitySet<comments>(new Action<comments>(this.attach_comments2), new Action<comments>(this.detach_comments2));
			this._comments1 = default(EntityRef<comments>);
			this._posts = default(EntityRef<posts>);
			this._users = default(EntityRef<users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parent_id", DbType="Int")]
		public System.Nullable<int> parent_id
		{
			get
			{
				return this._parent_id;
			}
			set
			{
				if ((this._parent_id != value))
				{
					if (this._comments1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparent_idChanging(value);
					this.SendPropertyChanging();
					this._parent_id = value;
					this.SendPropertyChanged("parent_id");
					this.Onparent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_post_id", DbType="Int NOT NULL")]
		public int post_id
		{
			get
			{
				return this._post_id;
			}
			set
			{
				if ((this._post_id != value))
				{
					if (this._posts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpost_idChanging(value);
					this.SendPropertyChanging();
					this._post_id = value;
					this.SendPropertyChanged("post_id");
					this.Onpost_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payload", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string payload
		{
			get
			{
				return this._payload;
			}
			set
			{
				if ((this._payload != value))
				{
					this.OnpayloadChanging(value);
					this.SendPropertyChanging();
					this._payload = value;
					this.SendPropertyChanged("payload");
					this.OnpayloadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="comments_comments", Storage="_comments2", ThisKey="id", OtherKey="parent_id")]
		public EntitySet<comments> comments2
		{
			get
			{
				return this._comments2;
			}
			set
			{
				this._comments2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="comments_comments", Storage="_comments1", ThisKey="parent_id", OtherKey="id", IsForeignKey=true)]
		public comments comments1
		{
			get
			{
				return this._comments1.Entity;
			}
			set
			{
				comments previousValue = this._comments1.Entity;
				if (((previousValue != value) 
							|| (this._comments1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._comments1.Entity = null;
						previousValue.comments2.Remove(this);
					}
					this._comments1.Entity = value;
					if ((value != null))
					{
						value.comments2.Add(this);
						this._parent_id = value.id;
					}
					else
					{
						this._parent_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("comments1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="posts_comments", Storage="_posts", ThisKey="post_id", OtherKey="id", IsForeignKey=true)]
		public posts posts
		{
			get
			{
				return this._posts.Entity;
			}
			set
			{
				posts previousValue = this._posts.Entity;
				if (((previousValue != value) 
							|| (this._posts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._posts.Entity = null;
						previousValue.comments.Remove(this);
					}
					this._posts.Entity = value;
					if ((value != null))
					{
						value.comments.Add(this);
						this._post_id = value.id;
					}
					else
					{
						this._post_id = default(int);
					}
					this.SendPropertyChanged("posts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_comments", Storage="_users", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.comments.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.comments.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comments2(comments entity)
		{
			this.SendPropertyChanging();
			entity.comments1 = this;
		}
		
		private void detach_comments2(comments entity)
		{
			this.SendPropertyChanging();
			entity.comments1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.posts")]
	public partial class posts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _header;
		
		private string _short_topic;
		
		private string _main_topic;
		
		private int _user_id;
		
		private EntitySet<comments> _comments;
		
		private EntityRef<users> _users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnheaderChanging(string value);
    partial void OnheaderChanged();
    partial void Onshort_topicChanging(string value);
    partial void Onshort_topicChanged();
    partial void Onmain_topicChanging(string value);
    partial void Onmain_topicChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    #endregion
		
		public posts()
		{
			this._comments = new EntitySet<comments>(new Action<comments>(this.attach_comments), new Action<comments>(this.detach_comments));
			this._users = default(EntityRef<users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_header", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string header
		{
			get
			{
				return this._header;
			}
			set
			{
				if ((this._header != value))
				{
					this.OnheaderChanging(value);
					this.SendPropertyChanging();
					this._header = value;
					this.SendPropertyChanged("header");
					this.OnheaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_short_topic", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string short_topic
		{
			get
			{
				return this._short_topic;
			}
			set
			{
				if ((this._short_topic != value))
				{
					this.Onshort_topicChanging(value);
					this.SendPropertyChanging();
					this._short_topic = value;
					this.SendPropertyChanged("short_topic");
					this.Onshort_topicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_main_topic", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string main_topic
		{
			get
			{
				return this._main_topic;
			}
			set
			{
				if ((this._main_topic != value))
				{
					this.Onmain_topicChanging(value);
					this.SendPropertyChanging();
					this._main_topic = value;
					this.SendPropertyChanged("main_topic");
					this.Onmain_topicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="posts_comments", Storage="_comments", ThisKey="id", OtherKey="post_id")]
		public EntitySet<comments> comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				this._comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_posts", Storage="_users", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.posts.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.posts.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comments(comments entity)
		{
			this.SendPropertyChanging();
			entity.posts = this;
		}
		
		private void detach_comments(comments entity)
		{
			this.SendPropertyChanging();
			entity.posts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _login;
		
		private string _password;
		
		private string _avatar;
		
		private System.Nullable<int> _karma;
		
		private EntitySet<comments> _comments;
		
		private EntitySet<posts> _posts;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnavatarChanging(string value);
    partial void OnavatarChanged();
    partial void OnkarmaChanging(System.Nullable<int> value);
    partial void OnkarmaChanged();
    #endregion
		
		public users()
		{
			this._comments = new EntitySet<comments>(new Action<comments>(this.attach_comments), new Action<comments>(this.detach_comments));
			this._posts = new EntitySet<posts>(new Action<posts>(this.attach_posts), new Action<posts>(this.detach_posts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this.OnavatarChanging(value);
					this.SendPropertyChanging();
					this._avatar = value;
					this.SendPropertyChanged("avatar");
					this.OnavatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_karma", DbType="Int")]
		public System.Nullable<int> karma
		{
			get
			{
				return this._karma;
			}
			set
			{
				if ((this._karma != value))
				{
					this.OnkarmaChanging(value);
					this.SendPropertyChanging();
					this._karma = value;
					this.SendPropertyChanged("karma");
					this.OnkarmaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_comments", Storage="_comments", ThisKey="id", OtherKey="user_id")]
		public EntitySet<comments> comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				this._comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_posts", Storage="_posts", ThisKey="id", OtherKey="user_id")]
		public EntitySet<posts> posts
		{
			get
			{
				return this._posts;
			}
			set
			{
				this._posts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comments(comments entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_comments(comments entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
		
		private void attach_posts(posts entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_posts(posts entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
	}
}
#pragma warning restore 1591
